#!/usr/bin/env python3
"""
Generate TikZ diagrams for GeoAuPredict presentation.

The script writes two files under diagrams/:
  - pipeline.tex
  - architecture.tex

Positions are explicitly spaced to avoid label overlap. Adjust spacing constants
below if you need more separation.
"""

from pathlib import Path


def ensure_dirs():
    out_dir = Path(__file__).parent / "diagrams"
    out_dir.mkdir(parents=True, exist_ok=True)
    return out_dir


def write_file(path: Path, content: str) -> None:
    path.write_text(content, encoding="utf-8")


def generate_pipeline_tikz() -> str:
    return r"""
% Auto-generated by generate_diagrams.py
\begin{tikzpicture}[node distance=1.6cm]
  % Styles
  \tikzset{
    block/.style={draw, rounded corners, thick, align=center, fill=slate800, text=slate100, inner sep=6pt},
    data/.style={draw, rounded corners, thick, align=center, fill=slate700, text=slate100, inner sep=6pt},
    process/.style={draw, rounded corners, thick, align=center, fill=slate700, text=slate100, inner sep=6pt},
    result/.style={draw, rounded corners, thick, align=center, fill=slate800, text=slate100, inner sep=6pt},
    dashedblock/.style={draw=slate700, rounded corners, thick, align=center, dashed, inner sep=6pt},
    line/.style={-Latex, very thick, draw=cyan400},
  }

  % Row 1: Data sources (explicit coordinates to avoid overlap)
  \node[data] (geochem) at (0,0) {Geochemical\\Samples};
  \node[data] (terrain) at (4,0) {Terrain/DEM};
  \node[data] (remote)  at (8,0) {Remote\\Sensing};
  \node[data] (geology) at (12,0) {Geology\\Layers};

  % Row 2
  \node[process] (ingest) at (2,-2.2) {Ingestion \& Preprocessing\\CRS align, resample, clip, clean};
  \node[process] (feat)   at (10,-2.2) {Feature Engineering\\indices, texture, distances};

  % Row 3
  \node[block] (split) at (2,-4.6) {Spatial Train/Test Split\\(Geographic Blocks)};
  \node[block] (cv)    at (10,-4.6) {Spatial Cross-Validation\\(k folds, geographic)};

  % Row 4: Models
  \node[block] (rf)   at (0.5,-7.1) {Random Forest};
  \node[block] (xgb)  at (6.0,-7.1) {XGBoost};
  \node[block] (lgbm) at (11.5,-7.1) {LightGBM};

  % Row 5
  \node[result] (eval)    at (6.0,-9.6) {Evaluation\\Accuracy, F1, ROC-AUC, Precision@k};
  \node[result] (mapping) at (6.0,-12.0) {Probability Mapping\\(Kriging/Interpolation)};
  \node[result] (deploy)  at (6.0,-14.4) {Web/GIS Deployment\\Dashboards, APIs};

  % Edges
  \draw[line] (geochem) -- (ingest);
  \draw[line] (terrain) -- (ingest);
  \draw[line] (remote)  -- (feat);
  \draw[line] (geology) -- (feat);
  \draw[line] (ingest) -- (split);
  \draw[line] (feat)   -- (cv);
  \draw[line] (split)  |- (rf);
  \draw[line] (cv)     -- (xgb);
  \draw[line] (split)  |- (lgbm);
  \draw[line] (rf)  -- (eval);
  \draw[line] (xgb) -- (eval);
  \draw[line] (lgbm) -- (eval);
  \draw[line] (eval) -- (mapping);
  \draw[line] (mapping) -- (deploy);

  % Group boxes
  \node[dashedblock, fit=(geochem) (terrain) (remote) (geology), label={[gray]above:Data Sources}] {};
  \node[dashedblock, fit=(ingest) (feat), label={[gray]above:Preparation}] {};
  \node[dashedblock, fit=(split) (cv), label={[gray]above:Validation Strategy}] {};
  \node[dashedblock, fit=(rf) (xgb) (lgbm), label={[gray]above:Models}] {};
  \node[dashedblock, fit=(eval) (mapping) (deploy), label={[gray]right:Outputs}] {};
\end{tikzpicture}
"""


def generate_architecture_tikz() -> str:
    return r"""
% Auto-generated by generate_diagrams.py
\begin{tikzpicture}[node distance=1.5cm]
  % Styles
  \tikzset{
    block/.style={draw, rounded corners, thick, align=center, fill=slate800, text=slate100, inner sep=6pt},
    data/.style={draw, rounded corners, thick, align=center, fill=slate700, text=slate100, inner sep=6pt},
    process/.style={draw, rounded corners, thick, align=center, fill=slate700, text=slate100, inner sep=6pt},
    result/.style={draw, rounded corners, thick, align=center, fill=slate800, text=slate100, inner sep=6pt},
    dashedblock/.style={draw=slate700, rounded corners, thick, align=center, dashed, inner sep=6pt},
    line/.style={-Latex, very thick, draw=cyan400},
    thinlink/.style={-Latex, thick, draw=indigo400},
  }

  % Inputs (fixed spacing)
  \node[data] (features) at (0,0) {Engineered Features\\(elevation, indices, distances, etc.)};

  % Base learners row
  \node[block] (rf)   at (-5,-2.2) {Random Forest\\$n$ trees};
  \node[block] (xgb)  at (0,-2.2)  {XGBoost\\GBDT};
  \node[block] (lgbm) at (5,-2.2)  {LightGBM\\GBDT};

  % Ensemble and output
  \node[process] (ens)  at (0,-4.5) {Soft Voting / Averaging};
  \node[result]  (proba) at (0,-6.8) {Gold Presence Probability\\[2pt] \\( p(\\mathrm{Au}=1\\mid \\mathbf{x}) \\)};

  % Links
  \draw[line] (features) -- (rf);
  \draw[line] (features) -- (xgb);
  \draw[line] (features) -- (lgbm);
  \draw[line] (rf) -- (ens);
  \draw[line] (xgb) -- (ens);
  \draw[line] (lgbm) -- (ens);
  \draw[line] (ens) -- (proba);

  % Side panels
  \node[dashedblock, right=6.5cm of xgb, align=left, inner sep=8pt] (trainbox) {Training Details:\\
    \begin{tabular}{@{}l@{}}
      Spatial CV (k-fold)\\
      Class balance check\\
      Hyperparams (depth, estimators, lr)\\
      Early stopping (boosting models)
    \end{tabular}
  };

  \node[dashedblock, left=6.8cm of xgb, align=left, inner sep=8pt] (evalbox) {Evaluation Metrics:\\
    \begin{tabular}{@{}l@{}}
      Accuracy, Precision, Recall\\
      F1, ROC-AUC\\
      Precision@k (targeting)
    \end{tabular}
  };

  \draw[thinlink] (trainbox.west) -- ++(-0.7,0) |- (xgb);
  \draw[thinlink] (evalbox.east) -- ++(0.7,0) |- (xgb);
\end{tikzpicture}
"""


def main():
    out_dir = ensure_dirs()
    write_file(out_dir / "pipeline.tex", generate_pipeline_tikz())
    write_file(out_dir / "architecture.tex", generate_architecture_tikz())
    print(f"Wrote: {out_dir / 'pipeline.tex'}")
    print(f"Wrote: {out_dir / 'architecture.tex'}")


if __name__ == "__main__":
    main()


